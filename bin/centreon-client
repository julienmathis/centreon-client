#!/usr/bin/env python

"""
Client part of Centreon automation.

Copyright 2013 Miljan Karadzic. (miljank@gmail.com)

This file is part of Centreon Client.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys
from optparse import OptionParser, OptionGroup
from centreond.client import CentreonClient

usage = """%prog [object] [operation] [options]

Objects:
    host            Host actions.
    hostgroup       Host group actions.
    downtime        Downtime actions.
    contact         Contact actions.
    contactgroup    Contact group actions.
    config          Configuration management options.

Host operations:
    add             Add a host.
    info            Show host details.
    update          Update host timezone.

Host group operations:
    info            Show hostgroup members.
    update          Update timezone of hostgroup members.
    list            List all hostgroups.

Contact operations:
    update          Update contact timezone.

Contact group operations:
    info            Show contact group members.
    update          Update timezone of contact group members.
    list            List all contact groups.

Downtime operations:
    add             Add a downtime.

Config operations:
    test            Test configuration for sanity.
    deploy          Deploy configuration to a poller."""


def get_cmd_options():
    objects = ['host', 'hostgroup', 'downtime', 'contact', 'contactgroup', 'config', 'attr', 'server']
    operations = ['add', 'info', 'update', 'list', 'test', 'deploy', 'remove', 'values', 'stop']
    parser = OptionParser(usage=usage)

    parser.add_option("-x", "--api", dest="api_server", default="centreon",
                      help="API server. Usually the central server running Centreon. Default: centreon")
    parser.add_option("--port", dest="api_port", default=9997,
                      help="Port to listen on. Default: 9997", type="int")
    parser.add_option("-p", "--poller", dest="poller",
                      help="Nagios poller to operate on. E.g. singapore.")
    parser.add_option("-n", "--name", dest="name",
                      help="Name to operate on. Required for add, info, update or remove operations.")
    parser.add_option("-z", "--timezone", dest="timezone", type="int",
                      help="Timezone offset from Amsterdam time")
    parser.add_option('-r', '--raw', dest="raw", action="store_true", default=False,
                      help="Do not format output, print raw JSON response instead.")

    host = OptionGroup(parser, "Host options", "These options can be used to register or remove a host.")
    parser.add_option("-t", "--template", dest="templates",
                      help="Colon delimited list of templates to use for this host.")
    parser.add_option("--reload-poller", dest="reload_poller", default=False, action="store_true",
                      help="Sync configuration to the poller and reload. If not used with --now, reload will be scheduled to run in 30 minutes.")
    parser.add_option("--now", dest="reload_poller_now", default=False,
                      help="Used with --reload-poller in order to sync and reload configuration of a poller right away.", action="store_true")
    parser.add_option_group(host)

    downtime = OptionGroup(parser, "Downtime options", "These options can be used to set, list and remove host downtimes.")
    downtime.add_option("-m", "--message", dest="message",
                        help="Reason for downtime.")
    downtime.add_option("-d", "--duration", dest="duration", type="int",
                        help="Downtime duration in minutes.",)
    parser.add_option_group(downtime)

    attrs = OptionGroup(parser, "Attribute options", "These options can be used to set, list and remove host attributes.")
    attrs.add_option("-a", "--attribute", dest="attribute",
                     help="Reason for attrs.")
    parser.add_option_group(attrs)

    auth = OptionGroup(parser, "Authentication options", "These options can be used to set authentication parameters.")
    auth.add_option("-u", "--username", dest="username", default="admin",
                    help="Username to use to authenticate to Centreon.")
    auth.add_option("--password", dest="password", default="admin",
                    help="Password to use to authenticate to Centreon.")
    parser.add_option_group(auth)

    (opts, args) = parser.parse_args()

    if not args:
        print("[error] No object specified")
        sys.exit(1)

    if len(args) > 2:
        print("[error] Please choose only one object.")
        sys.exit(1)

    if args[0] not in objects:
        print("[error] Object is not supported.")
        sys.exit(1)
    opts.object = args[0]

    if args[1] not in operations:
        print("[error] Operation is not supported.")
        sys.exit(1)
    opts.operation = args[1]

    if not opts.api_server:
        print("[error] API server is not defined.")
        sys.exit(1)

    return opts

if __name__ == "__main__":
    options = get_cmd_options()
    CentreonClient(options).send()
